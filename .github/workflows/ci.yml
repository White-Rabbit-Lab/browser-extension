name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm run lint:typecheck

      - name: Run ESLint
        run: pnpm run lint:eslint

      - name: Run Prettier check
        run: pnpm run lint:prettier

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build extension
        run: pnpm run build

      - run: |
          pwd
          ls -la

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: .output/
          retention-days: 1

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint, build]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build
          path: .output/

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(pnpm exec playwright --version | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps chromium

      - name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps chromium

      - name: Run E2E tests
        run: pnpm exec playwright test
        env:
          CI: true

      - name: Upload test reports
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 1

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, build, e2e-test]
    if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate daily version
        id: daily_version
        uses: fregante/daily-version-action@v2

      - name: Update package.json version
        run: |
          npm pkg set version="${{ steps.daily_version.outputs.version }}"
          echo "Updated version to ${{ steps.daily_version.outputs.version }}"

      - name: Update manifest version
        run: |
          node -e "
          const fs = require('fs');
          const config = fs.readFileSync('wxt.config.ts', 'utf8');
          const updated = config.replace(/version: \"[^\"]+\"/, 'version: \"${{ steps.daily_version.outputs.version }}\"');
          fs.writeFileSync('wxt.config.ts', updated);
          "

      - name: Build and zip extension
        run: pnpm run zip

      - name: Rename zip file
        run: mv .output/nocode-web-assistant-${{ steps.daily_version.outputs.version }}-chrome.zip nocode-web-assistant-chrome-${{ steps.daily_version.outputs.version }}.zip

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "${{ steps.daily_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.daily_version.outputs.version }}
          name: Release ${{ steps.daily_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            nocode-web-assistant-chrome-${{ steps.daily_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
